/*
 * The MIT License
 *
 * Original work sponsored and donated by National Board of e-Health (NSI), Denmark (http://www.nsi.dk)
 *
 * Copyright (C) 2011 National Board of e-Health (NSI), Denmark (http://www.nsi.dk)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * $HeadURL$
 * $Id$
 */
package dk.sosi.seal;

import dk.sosi.seal.model.IdentityToken;
import dk.sosi.seal.model.IdentityTokenBuilder;
import dk.sosi.seal.model.LibertyRequestDOMEnhancer;
import dk.sosi.seal.model.dombuilders.IdentityTokenRequestDOMBuilder;
import dk.sosi.seal.model.dombuilders.IdentityTokenResponseDOMBuilder;
import dk.sosi.seal.modelbuilders.IdentityTokenRequestModelBuilder;
import dk.sosi.seal.modelbuilders.IdentityTokenResponseModelBuilder;
import dk.sosi.seal.modelbuilders.LibertyRequestModelBuilder;
import dk.sosi.seal.pki.Federation;
import dk.sosi.seal.vault.CredentialVault;
import org.w3c.dom.Document;


/**
 * The <code>IDWSHFactory</code> is the main class for handling IDWSH message flows.<br />
 * <br />
 * As of Seal.java version 2.1, the IDWSHFactory only supports message flows in regards to <code>IdentityTokens</code>.<br />
 * <br />
 * <b><code>IdentityToken</code> flow.</b><br />
 * <img src="doc-files/IDWSHFactory-1.png" /><br />
 * <i>----Client begin----</i><br />
 * The client initiates the process of procuring an <code>IdentityToken</code> by creating an <code>IdentityTokeRequest</code>.<br />
 * To create an <code>IdentityTokenRequest</code> the client initiates and populates an <code>IdentityTokenRequestDOMBuilder</code> retrieved through the <code>IDWSHFactory</code>.<br />
 * Having supplied all required attributes to the builder, the client invokes {@link IdentityTokenRequestDOMBuilder#build()}, and then transmits the message to the STS.<br />
 * <i>----Client end----</i><br />
 * <br />
 * <i>----STS begin----</i><br />
 * When the STS receives an <code>IdentityTokenRequest</code>, the STS initates an <code>IdentityTokenRequestModelBuilder</code> and converts the received <code>Document</code> into a full blow<br />
 * <code>IdentityTokenRequest</code> object instance.<br />
 * To create an <code>IdentityToken</code> the STS initiates and populates an <code>IdentityTokenBuilder</code> retrieved through the <code>IDWSHFactory</code>.<br />
 * To create an <code>IdentityTokenResponse</code> the STS initiates and populates an <code>IdentityTokenResponseDOMBuilder</code> retrieved through the <code>IDWSHFactory</code>.<br />
 * The process requires that the <code>IdentityTokenBuilder</code> is populated and the provided to the <code>IdentityTokenResponseDOMBuilder</code>.<br />
 * Once all requires attributes have been assigned, the response <code>Document</code> is generated by calling {@link IdentityTokenResponseDOMBuilder#build()}.<br />
 * Please note: The process does not require the STS to call {@link IdentityTokenBuilder#build() } - this method is indirectly invoked when calling {@link IdentityTokenResponseDOMBuilder#build()}.<br />
 * Once generated, the response is then transmitted back to the client.<br />
 * <i>----STS end----</i><br />
 * <br />
 * <i>----Client begin----</i><br />
 * Once the <code>IdentityTokenResponse</code> has been received the client iniates an <code>IdentityTokenResponseModelBuilder</code> and converts the received <code>Document</code> into a full blow<br />
 * <code>IdentityTokenResponse</code> object instance.<br />
 * From the <code>IdentityTokenResponse</code> the client can now retrieve the actual <code>IdentityToken</code> object.<br />
 * Once the <code>IdentityToken</code> has been extracted the client can now use this to communicate with a capable web content provider.<br />
 * To use the <code>IdentityToken</code> as part of an URL, the <code>IdentityToken</code> can be converted into a URL representation by calling {@link IdentityToken#createURLBuilder()}.<br />
 * <b>Be ware:</b> The URL representation of an <code>IdentityToken</code> is rather long, and greatly limits the number of characters allowed for other information.<br />
 * The current limitation is set by Internet Explorer - which requires an URL by less the 2000 characters long.<br />
 * <i>----Client end----</i><br />
 * <br />
 * <i>----Web provider begin----</i><br />
 * Once an GET request, including an URL encoded <code>IdentityToken</code>, has been recieved - the web provider can de-serialize the URL value into an <code>IdentityToken</code> by invoking<br />
 * the {@link IDWSHFactory#createIdentityTokenFromURL(String)} method.<br />
 * <i>----Web provider end----</i><br />
 * <br />
 * 
 * @author Anders SÃ¸rensen/ads@lakeside.dk
 * @since 2.1
 */
public class IDWSHFactory {

    private final CredentialVault credentialVault;
    private final Federation federation;

    /**
     * Constructor for the <code>IDWSHFactory</code> class.
     * 
     * @param federation
     *            The <code>Federation</code> to use. See {@link Federation} for more information.
     * @param credentialVault
     *            The <code>CredentialVault</code> to use. See {@link CredentialVault} for more information.
     */
    public IDWSHFactory(Federation federation, CredentialVault credentialVault) {
        this.federation = federation;
        this.credentialVault = credentialVault;
    }

    /**
     * Creates an <code>IdentityTokenResponseDOMBuilder</code> instance used for constructing an <code>IdentityTokenBuilder</code>.
     * 
     * @return An <code>IdentityTokenBuilder</code> instance.
     */
    public IdentityTokenBuilder createIdentityTokenBuilder() {
        if(credentialVault == null) {
            throw new IllegalStateException("CredentialVault must be set on IDWSHFactory in order to build signed IdentityTokens");
        }
        return new IdentityTokenBuilder(credentialVault);
    }

    /**
     * Creates an <code>IdentityToken</code> instance by de-serializing the supplied URL <code>String</code>.
     * 
     * @see IdentityToken
     * @return An <code>IdentityToken</code> instance.
     */
    public IdentityToken createIdentityTokenFromURL(String url) {
        if(federation == null) {
            throw new IllegalStateException("Federation must be set on IDWSHFactory in order to create and validate IdentityTokens from an URL string");
        }
        return IdentityTokenBuilder.constructFromURLString(url, federation);
    }

    /**
     * Creates an <code>IdentityTokenRequestDOMBuilder</code> instance used for constructing a <code>Document</code> containing an <code>IdentityToken</code> request.
     * 
     * @return An <code>IdentityTokenRequestDOMBuilder</code> instance.
     */
    public IdentityTokenRequestDOMBuilder createIdentityTokenRequestDOMBuilder() {
        return new IdentityTokenRequestDOMBuilder();
    }

    /**
     * Creates an <code>IdentityTokenRequestModelBuilder</code> instance used for de-serializing a <code>Document</code> into an <code>IdentityTokenRequest</code> object.
     * 
     * @return An <code>IdentityTokenRequestModelBuilder</code> instance.
     */
    public IdentityTokenRequestModelBuilder createIdentityTokenRequestModelBuilder() {
        if(federation == null) {
            throw new IllegalStateException("Federation must be set on IDWSHFactory in order to be able to parse and validate IdentityTokenRequests");
        }
        return new IdentityTokenRequestModelBuilder(federation);
    }

    /**
     * Creates an <code>IdentityTokenResponseDOMBuilder</code> instance used for constructing a <code>Document</code> containing an <code>IdentityToken</code> response.
     * 
     * @return An <code>IdentityTokenResponseDOMBuilder</code> instance.
     */
    public IdentityTokenResponseDOMBuilder createIdentityTokenResponseDOMBuilder() {
        return new IdentityTokenResponseDOMBuilder();
    }

    /**
     * Creates an <code>IdentityTokenResponseModelBuilder</code> instance used for de-serializing a <code>Document</code> into an <code>IdentityTokenResponse</code> object.
     * 
     * @return An <code>IdentityTokenResponseModelBuilder</code> instance.
     */
    public IdentityTokenResponseModelBuilder createIdentityTokenResponseModelBuilder() {
        return new IdentityTokenResponseModelBuilder();
    }

    /**
     * Creates an <code>LibertyRequestDOMEnhancer</code> instance used to enhance an existing <code>Document</code> representing af soap message to adhere to the Liberty basic soap specification.
     *
     * @param envelope A <code>Document</code> representing the soap message to enhance
     * @return A <code>LibertyRequestDOMEnhancer</code> instance
     */
    public LibertyRequestDOMEnhancer createLibertyRequestDOMEnhancer(Document envelope) {
        if(credentialVault == null) {
            throw new IllegalStateException("CredentialVault must be set on IDWSHFactory in order to build signed Liberty requests");
        }
        return new LibertyRequestDOMEnhancer(credentialVault, envelope);
    }

    public LibertyRequestModelBuilder createLibertyRequestModelBuilder() {
        if(federation == null) {
            throw new IllegalStateException("Federation must be set on IDWSHFactory in order to parse signed Liberty requests");
        }
        return new LibertyRequestModelBuilder(federation);
    }

}